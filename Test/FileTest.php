<?php

namespace Rico\Test\FileTest;

use \Rico\Lib\File;

/**
 * Test class for File.
 * Generated by PHPUnit on 2012-02-02 at 16:17:36.
 */
class FileTest extends \PHPUnit_Framework_TestCase {
    const TEST_DIR = 'test/';
    public static $strFile1 = 'file1.test';
    public static $strFile2 = 'file2';
    public static $strFile3 = 'SpÃ©ci@l.rtf';
    public static $strFile4 = 'file4.txt';
    public static $strDir = 'dir1';
    public static $strDir2 = 'dir2';


    public static function setUpBeforeClass()
    {
        mkdir(self::TEST_DIR);
        mkdir(self::TEST_DIR.self::$strDir);
        mkdir(self::TEST_DIR.self::$strDir2);
        file_put_contents(self::TEST_DIR.self::$strFile1, str_repeat(mt_rand(0,9), 5000));
        file_put_contents(self::TEST_DIR.self::$strFile2, str_repeat(mt_rand(0,9), 5000));
        file_put_contents(self::TEST_DIR.self::$strFile3, str_repeat(mt_rand(0,9), 2048576));
        file_put_contents(self::TEST_DIR.self::$strDir2.'/'.self::$strFile4, str_repeat(mt_rand(0,9), 288576));
    }

    public static function tearDownAfterClass()
    {
        unlink(self::TEST_DIR.self::$strFile1);
        unlink(self::TEST_DIR.self::$strFile2);
        unlink(self::TEST_DIR.self::$strFile3);
        unlink(self::TEST_DIR.self::$strDir2.'/'.self::$strFile4);
        rmdir(self::TEST_DIR.self::$strDir);
        rmdir(self::TEST_DIR.self::$strDir2);
        rmdir(self::TEST_DIR);
    }

    /**
     * @covers File::listDirectory
     */
    public function testListDirectory()
    {
        $this->assertEquals(array('directory' => array(self::$strDir, self::$strDir2), 'file' => array(self::$strFile1, self::$strFile2, self::$strFile3)), File::listDirectory(self::TEST_DIR));
        $this->assertEquals(array('directory' => array(self::$strDir, self::$strDir2), 'file' => array(self::$strFile1, self::$strFile2, self::$strFile3)), File::listDirectory(self::TEST_DIR, File::LIST_DIRECTORY_BOTH));
        $this->assertEquals(array('file' => array(self::$strFile4)), File::listDirectory(self::TEST_DIR.self::$strDir2));
        $this->assertEquals(array(self::$strDir, self::$strDir2), File::listDirectory(self::TEST_DIR, File::LIST_DIRECTORY_DIR_ONLY));
        $this->assertEquals(array(self::$strFile1, self::$strFile2, self::$strFile3), File::listDirectory(self::TEST_DIR, File::LIST_DIRECTORY_FILE_ONLY));
    }

}
